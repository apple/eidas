package qcstatements

import (
	"encoding/hex"
	"fmt"
	"testing"
)

var defaultCA = CompetentAuthority{
	Name: "Financial Conduct Authority",
	ID:   "GB-FCA",
}

func TestSimple(t *testing.T) {
	pspAS := "305b3013060604008e4601063009060704008e4601060330440606040081982702303a301330110607040081982701010c065053505f41530c1b46696e616e6369616c20436f6e6475637420417574686f726974790c0647422d464341"
	d, err := Serialize([]Role{RoleAccountServicing}, defaultCA, QWACType)
	if err != nil {
		t.Error(err)
	}
	enc := hex.EncodeToString(d)
	if enc != pspAS {
		t.Error("Mismatch with PSP_AS", enc)
	}
}

// TestAll tests against all the example data in "eIDAS PSD2 Certificate Signing Request Profiles" Issue: 2.2, dated 20th May 2020
func TestAll(t *testing.T) {
	type testData struct {
		Expected string
		Roles    []Role
	}
	expected := []testData{{
		Expected: "305b3013060604008e4601063009060704008e4601060330440606040081982702303a301330110607040081982701010c065053505f41530c1b46696e616e6369616c20436f6e6475637420417574686f726974790c0647422d464341",
		Roles:    []Role{RoleAccountServicing},
	}, {
		Expected: "305b3013060604008e4601063009060704008e4601060330440606040081982702303a301330110607040081982701020c065053505f50490c1b46696e616e6369616c20436f6e6475637420417574686f726974790c0647422d464341",
		Roles:    []Role{RolePaymentInitiation},
	}, {
		Expected: "305b3013060604008e4601063009060704008e4601060330440606040081982702303a301330110607040081982701030c065053505f41490c1b46696e616e6369616c20436f6e6475637420417574686f726974790c0647422d464341",
		Roles:    []Role{RoleAccountInformation},
	}, {
		Expected: "305b3013060604008e4601063009060704008e4601060330440606040081982702303a301330110607040081982701040c065053505f49430c1b46696e616e6369616c20436f6e6475637420417574686f726974790c0647422d464341",
		Roles:    []Role{RolePaymentInstruments},
	}, {
		Expected: "306e3013060604008e4601063009060704008e4601060330570606040081982702304d302630110607040081982701010c065053505f415330110607040081982701020c065053505f50490c1b46696e616e6369616c20436f6e6475637420417574686f726974790c0647422d464341",
		Roles:    []Role{RoleAccountServicing, RolePaymentInitiation},
	}, {
		Expected: "306e3013060604008e4601063009060704008e4601060330570606040081982702304d302630110607040081982701010c065053505f415330110607040081982701040c065053505f49430c1b46696e616e6369616c20436f6e6475637420417574686f726974790c0647422d464341",
		Roles:    []Role{RoleAccountServicing, RolePaymentInstruments},
	}, {
		Expected: "306e3013060604008e4601063009060704008e4601060330570606040081982702304d302630110607040081982701020c065053505f504930110607040081982701030c065053505f41490c1b46696e616e6369616c20436f6e6475637420417574686f726974790c0647422d464341",
		Roles:    []Role{RolePaymentInitiation, RoleAccountInformation},
	}, {
		Expected: "306e3013060604008e4601063009060704008e4601060330570606040081982702304d302630110607040081982701020c065053505f504930110607040081982701040c065053505f49430c1b46696e616e6369616c20436f6e6475637420417574686f726974790c0647422d464341",
		Roles:    []Role{RolePaymentInitiation, RolePaymentInstruments},
	}, {
		Expected: "306e3013060604008e4601063009060704008e4601060330570606040081982702304d302630110607040081982701030c065053505f414930110607040081982701040c065053505f49430c1b46696e616e6369616c20436f6e6475637420417574686f726974790c0647422d464341",
		Roles:    []Role{RoleAccountInformation, RolePaymentInstruments},
	}, {
		Expected: "3081813013060604008e4601063009060704008e46010603306a06060400819827023060303930110607040081982701010c065053505f415330110607040081982701020c065053505f504930110607040081982701030c065053505f41490c1b46696e616e6369616c20436f6e6475637420417574686f726974790c0647422d464341",
		Roles:    []Role{RoleAccountServicing, RolePaymentInitiation, RoleAccountInformation},
	}, {
		Expected: "3081813013060604008e4601063009060704008e46010603306a06060400819827023060303930110607040081982701010c065053505f415330110607040081982701020c065053505f504930110607040081982701040c065053505f49430c1b46696e616e6369616c20436f6e6475637420417574686f726974790c0647422d464341",
		Roles:    []Role{RoleAccountServicing, RolePaymentInitiation, RolePaymentInstruments},
	}, {
		Expected: "3081813013060604008e4601063009060704008e46010603306a06060400819827023060303930110607040081982701010c065053505f415330110607040081982701030c065053505f414930110607040081982701040c065053505f49430c1b46696e616e6369616c20436f6e6475637420417574686f726974790c0647422d464341",
		Roles:    []Role{RoleAccountServicing, RoleAccountInformation, RolePaymentInstruments},
	}, {
		Expected: "3081813013060604008e4601063009060704008e46010603306a06060400819827023060303930110607040081982701020c065053505f504930110607040081982701030c065053505f414930110607040081982701040c065053505f49430c1b46696e616e6369616c20436f6e6475637420417574686f726974790c0647422d464341",
		Roles:    []Role{RolePaymentInitiation, RoleAccountInformation, RolePaymentInstruments},
	}, {
		Expected: "3081943013060604008e4601063009060704008e46010603307d06060400819827023073304c30110607040081982701010c065053505f415330110607040081982701020c065053505f504930110607040081982701030c065053505f414930110607040081982701040c065053505f49430c1b46696e616e6369616c20436f6e6475637420417574686f726974790c0647422d464341",
		Roles:    []Role{RoleAccountServicing, RolePaymentInitiation, RoleAccountInformation, RolePaymentInstruments},
	}}

	for _, e := range expected {
		t.Run(fmt.Sprint(e.Roles), func(t *testing.T) {
			_ = DumpFromHex(e.Expected)
			// Check our serialization matches theirs.
			s, err := Serialize(e.Roles, defaultCA, QWACType)
			if err != nil {
				t.Error(err)
			}
			if hex.EncodeToString(s) != e.Expected {
				t.Errorf("Mismatch with roles: %v %x != %s", e.Roles, s, e.Expected)
			}

			// Check we can extract the roles, name and ID correctly.
			d, err := hex.DecodeString(e.Expected)
			if err != nil {
				t.Error(err)
			}
			roles, name, id, err := Extract(d)
			if err != nil {
				t.Error(err)
			}
			for i, r := range roles {
				if e.Roles[i] != r {
					t.Errorf("Expected role: %s but got %s", e.Roles[i], r)
				}
			}
			if name != defaultCA.Name {
				t.Errorf("Expected CA name: %s but got %s", defaultCA.Name, name)
			}
			if id != defaultCA.ID {
				t.Errorf("Expected CA id: %s but got %s", defaultCA.ID, id)
			}
		})
	}
}

func TestQSEAL(t *testing.T) {
	type testData struct {
		Expected string
		Roles    []Role
	}
	expected := []testData{
		{
			Expected: "305b3013060604008e4601063009060704008e4601060230440606040081982702303a301330110607040081982701010c065053505f41530c1b46696e616e6369616c20436f6e6475637420417574686f726974790c0647422d464341",
			Roles:    []Role{RoleAccountServicing},
		},
		{
			Expected: "305b3013060604008e4601063009060704008e4601060230440606040081982702303a301330110607040081982701030c065053505f41490c1b46696e616e6369616c20436f6e6475637420417574686f726974790c0647422d464341",
			Roles:    []Role{RoleAccountInformation},
		},
	}
	for _, e := range expected {
		_ = DumpFromHex(e.Expected)
		// Check our serialization matches theirs.
		s, err := Serialize(e.Roles, defaultCA, QSEALType)
		if err != nil {
			t.Error(err)
		}
		if hex.EncodeToString(s) != e.Expected {
			t.Errorf("Mismatch with roles: %v", e.Roles)
		}

		// Check we can extract the roles, name and ID correctly.
		d, err := hex.DecodeString(e.Expected)
		if err != nil {
			t.Error(err)
		}
		roles, name, id, err := Extract(d)
		if err != nil {
			t.Error(err)
		}
		for i, r := range roles {
			if e.Roles[i] != r {
				t.Errorf("Expected role: %s but got %s", e.Roles[i], r)
			}
		}
		if name != defaultCA.Name {
			t.Errorf("Expected CA name: %s but got %s", defaultCA.Name, name)
		}
		if id != defaultCA.ID {
			t.Errorf("Expected CA id: %s but got %s", defaultCA.ID, id)
		}
	}
}
